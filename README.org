# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#+TITLE: Org-mem

# TODO: Document that TRAMP won't work.

A cache of metadata about the structure of all your Org files -- headings, links and so on.

Builds quickly, so that there is no need to persist data across sessions. My =M-x org-mem-reset=:

#+begin_example
Org-mem saw 3397 ID-nodes and 4845 ID-links in 2394 files, 8834 subtrees, 5560 links in 1.37s (+ 0.16s making SQLite DB)
#+end_example

This library came from asking myself "what could I move out of [[https://github.com/meedstrom/org-node][org-node]], that'd make sense in core?"  Maybe a proposal for upstream, or at least a PoC.

Many notetaking packages now reinvent the wheel, when it comes to keeping track of some or many files and what may be in them.

Example: org-roam's DB, org-node's hash tables, and other packages just re-run grep all the time, which still leads to writing elisp to cross-reference the results.

And they must do this, because Org ships no tool to query across lots of files.  You know what happens if you put 2,000 files into =org-agenda-files=!  It needs to open each file in real-time to check anything in them, so everyday commands grind to a halt, or even crash: many OSes have a cap of 1,024 simultaneous file handles.

** Quick overview

Example setup:

#+begin_src elisp
(setq org-mem-watch-dirs '("~/org/" "/mnt/stuff/notes/"))
(setq org-mem-do-sync-with-org-id t)
(org-mem-updater-mode)
#+end_src

Two different APIs to access the same data.

- Emacs Lisp
- SQL

Why two?  It's free.  When the data has been gathered anyway, there is no reason to /only/ insert it into a SQLite db, nor /only/ put it in a hash table.

Famously, org-roam uses a SQLite DB.  My package org-node used simple hash tables.  Now you get both, without having to install either.

** Data only

A design choice: Org-mem *only* delivers data.  It could easily ship conveniences like, let's call it a function "org-mem-goto":

#+begin_src elisp
(defun org-mem-goto (entry)
  (find-file (org-mem-entry-file entry))
  (goto-char (org-mem-entry-pos entry))
#+end_src

but in my experience, that will spiral into dozens of lines over time, to handle a variety of edge cases.  Since you may prefer to handle edge cases different than I do, or have different needs, it ceases to be universally applicable.

So, it is up to you to write your own "goto" function, and all else to do with user interaction.

** No Org at init

A design choice: Org-mem does not use Org code to analyze your files, but a [[https://github.com/meedstrom/org-mem/blob/main/org-mem-parser.el][custom, more dumb parser]].  That's for three reasons:

1. *Fast init*.  Since I want Emacs init to be fast, it's not allowed to load Org.  Yet, I want to be able to use a command like =org-node-find= to browse my Org stuff immediately after init.

   That means the data must exist before Org has loaded.

   - Future milestone: I want to be told at init if there's a dangling Org clock or missed deadline somewhere.

2. *Robustness.*  Many users heavily customize Org, so no surprise that it sometimes breaks.  In my experience, it's very nice then to have an alternative way to browse, that does not depend on a functional Org setup.

3. *Fast rebuild.*  As they say, there are two hard things in computer science: cache invalidation and naming things.

   Org-mem must update its cache as the user saves, renames and deletes files.  Not a difficult problem, until you realize that files may change due to a Git operation, OS file operations, a =rm= command on the terminal, edits by another Emacs instance, or even remote edits by Logseq.

   A robust approach to cache invalidation is to avoid trying: ensure that a full rebuild is fast enough that you can just do /that/ instead.

   In fact, =org-mem-updater-mode= does a bit of both, because it is still important that saving a file does not lag;  it does its best to update only the necessary tables on save, and an idle timer triggers a full reset every now and then.

# (anytime org-mem stores a char position, it tries to also store a line number, because it's easy at that time and comes in handy later to compare with grep results, for example)

** Appendix I: A SQLite database, for free

Included is a drop-in for [[https://github.com/org-roam/org-roam][org-roam's]] =(org-roam-db)=, called =(org-mem-roamy-db)=.

In the future we may also do a drop-in for [[https://github.com/ndwarshuis/org-sql/blob/80bea9996de7fa8bc7ff891a91cfaff91111dcd8/org-sql.el#L141][org-sql]]'s DB, or something custom, but we'll see!

*** Quick start with =org-mem-roamy-db=
**** Without org-roam installed

Activating the mode creates an in-memory database by default.

#+begin_src elisp
(org-mem-roamy-db-mode)
#+end_src

Test that it works:

#+begin_src elisp
(emacsql (org-mem-roamy-db) [:select * :from files :limit 10])
#+end_src

**** With org-roam installed

You can use this to end your dependence on =org-roam-db-sync=.  Set the following to overwrite the "org-roam.db" file.

#+begin_src elisp
(setq org-roam-db-update-on-save nil)
(setq org-mem-roamy-do-overwrite-real-db t)
(org-mem-roamy-db-mode)
#+end_src

Now, you have a new, all-fake org-roam.db!  Test that =org-roam-db-query= works:

#+begin_src elisp
(org-roam-db-query [:select * :from files :limit 10])
#+end_src

N/B: because =(equal (org-roam-db) (org-mem-roamy-db))=, the above is equivalent to these expressions:

#+begin_src elisp
(emacsql (org-roam-db) [:select * :from files :limit 10])
(emacsql (org-mem-roamy-db) [:select * :from files :limit 10])
#+end_src

A *known issue*: "attempt to write a readonly database".  Happens when you use multiple Emacsen.  Get unstuck with =M-: (org-roam-db--close-all)=.

**** View what info is inside the DB

Use the command =M-x org-mem-list-db-contents=.

** Appendix II: Elisp API

We use two types of objects to help represent file contents: =org-mem-entry= objects and =org-mem-link= objects.  They involve some broad simplifications:

- The content before the first heading counts as an entry with heading level zero.
  - Some predictable differences from normal entries: the zeroth-level entry obviously cannot have a TODO state, so =org-mem-entry-todo-state= always returns nil, and so on.
  - Check with =org-mem-entry-subtree-p=.

- An =org-mem-link= object corresponds either to a valid Org link, or to a citation fragment.
  - Check with =org-mem-link-citation-p=.


TODO: Some get-started examples.

** Appendix III: Fully inform org-id

Never sit through a slow =M-x org-id-update-id-locations= again.

#+begin_src elisp
(setq org-mem-do-sync-with-org-id t)
#+end_src

This tells org-id about everything that Org-mem can find under =org-mem-watch-dirs=.  That's nice because if you had clicked an ID-link that org-id did not know about, it would react by running =org-id-update-id-locations= for you, and that hangs Emacs for quite a while.

Never had this problem?  If you came here from org-node or org-roam, thatâ€™s because they solve this problem for you.
